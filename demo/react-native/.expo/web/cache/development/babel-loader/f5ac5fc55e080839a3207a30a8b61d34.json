{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Modes_1 = require(\"../../Enums/Modes\");\n\nvar Grabber = function () {\n  function Grabber(container) {\n    _classCallCheck(this, Grabber);\n\n    this.container = container;\n  }\n\n  _createClass(Grabber, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container;\n      var mouse = container.interactivity.mouse;\n      var events = container.options.interactivity.events;\n\n      if (!(events.onHover.enable && mouse.position)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab, hoverMode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact() {\n      var _a;\n\n      var container = this.container;\n      var options = container.options;\n      var interactivity = options.interactivity;\n\n      if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n        var mousePos = container.interactivity.mouse.position;\n\n        if (mousePos === undefined) {\n          return;\n        }\n\n        var distance = container.retina.grabModeDistance;\n        var query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n        for (var _iterator = _createForOfIteratorHelperLoose(query), _step; !(_step = _iterator()).done;) {\n          var particle = _step.value;\n          var pos = particle.getPosition();\n          var pointDistance = Utils_1.NumberUtils.getDistance(pos, mousePos);\n\n          if (pointDistance <= distance) {\n            var grabLineOptions = interactivity.modes.grab.links;\n            var lineOpacity = grabLineOptions.opacity;\n            var opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n            if (opacityLine > 0) {\n              var optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n\n              if (!container.particles.grabLineColor) {\n                var linksOptions = container.options.interactivity.modes.grab.links;\n                container.particles.grabLineColor = Utils_1.ColorUtils.getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n              }\n\n              var colorLine = Utils_1.ColorUtils.getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n              if (colorLine === undefined) {\n                return;\n              }\n\n              container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return Grabber;\n}();\n\nexports.Grabber = Grabber;","map":{"version":3,"sources":["/Users/matteo/Projects/GitHub Projects/tsparticles/tsparticles-master/demo/react-native/node_modules/react-native-tsparticles/node_modules/tsparticles/dist/Interactions/External/Grabber.js"],"names":["Object","defineProperty","exports","value","Grabber","Utils_1","require","Modes_1","container","mouse","interactivity","events","options","onHover","enable","position","hoverMode","mode","Utils","isInArray","HoverMode","grab","_a","status","Constants","mouseMoveEvent","mousePos","undefined","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","NumberUtils","getDistance","grabLineOptions","modes","links","lineOpacity","opacity","opacityLine","optColor","color","particlesOptions","grabLineColor","linksOptions","ColorUtils","getLinkRandomColor","blink","consent","colorLine","getLinkColor","canvas","drawGrabLine"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Modes_1 = require(\"../../Enums/Modes\");\nclass Grabber {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        const container = this.container;\n        const mouse = container.interactivity.mouse;\n        const events = container.options.interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab, hoverMode);\n    }\n    reset() {\n    }\n    interact() {\n        var _a;\n        const container = this.container;\n        const options = container.options;\n        const interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (mousePos === undefined) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance;\n            const query = container.particles.quadTree.queryCircle(mousePos, distance);\n            for (const particle of query) {\n                const pos = particle.getPosition();\n                const pointDistance = Utils_1.NumberUtils.getDistance(pos, mousePos);\n                if (pointDistance <= distance) {\n                    const grabLineOptions = interactivity.modes.grab.links;\n                    const lineOpacity = grabLineOptions.opacity;\n                    const opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n                    if (opacityLine > 0) {\n                        const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n                        if (!container.particles.grabLineColor) {\n                            const linksOptions = container.options.interactivity.modes.grab.links;\n                            container.particles.grabLineColor = Utils_1.ColorUtils.getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                        }\n                        const colorLine = Utils_1.ColorUtils.getLinkColor(particle, undefined, container.particles.grabLineColor);\n                        if (colorLine === undefined) {\n                            return;\n                        }\n                        container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                    }\n                }\n            }\n        }\n    }\n}\nexports.Grabber = Grabber;\n"]},"metadata":{},"sourceType":"script"}