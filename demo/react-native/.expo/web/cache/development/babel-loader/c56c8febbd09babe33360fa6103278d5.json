{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Infecter = void 0;\n\nvar Infecter = function () {\n  function Infecter(container) {\n    _classCallCheck(this, Infecter);\n\n    this.container = container;\n  }\n\n  _createClass(Infecter, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.container.options.infection.enable;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact(p1, delta) {\n      var _a, _b;\n\n      var infecter1 = p1.infecter;\n      infecter1.updateInfection(delta.value);\n\n      if (infecter1.infectionStage === undefined) {\n        return;\n      }\n\n      var container = this.container;\n      var options = container.options;\n      var infectionOptions = options.infection;\n\n      if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n        return;\n      }\n\n      var infectionStage1 = infectionOptions.stages[infecter1.infectionStage];\n      var pxRatio = container.retina.pixelRatio;\n      var radius = p1.getRadius() * 2 + infectionStage1.radius * pxRatio;\n      var pos = p1.getPosition();\n      var infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;\n      var query = container.particles.quadTree.queryCircle(pos, radius);\n      var infections = infectionStage1.rate;\n      var neighbors = query.length;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(query), _step; !(_step = _iterator()).done;) {\n        var p2 = _step.value;\n\n        if (p2 === p1 || p2.destroyed || p2.spawning || !(p2.infecter.infectionStage === undefined || p2.infecter.infectionStage !== infecter1.infectionStage)) {\n          continue;\n        }\n\n        var infecter2 = p2.infecter;\n\n        if (Math.random() < infections / neighbors) {\n          if (infecter2.infectionStage === undefined) {\n            infecter2.startInfection(infectedStage1);\n          } else if (infecter2.infectionStage < infecter1.infectionStage) {\n            infecter2.updateInfectionStage(infectedStage1);\n          } else if (infecter2.infectionStage > infecter1.infectionStage) {\n            var infectionStage2 = infectionOptions.stages[infecter2.infectionStage];\n            var infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;\n            infecter1.updateInfectionStage(infectedStage2);\n          }\n        }\n      }\n    }\n  }]);\n\n  return Infecter;\n}();\n\nexports.Infecter = Infecter;","map":{"version":3,"sources":["/Users/matteo/Projects/tests/NativeParticles/node_modules/react-native-tsparticles/node_modules/tsparticles/dist/Interactions/Particles/Infecter.js"],"names":["Object","defineProperty","exports","value","Infecter","container","options","infection","enable","p1","delta","_a","_b","infecter1","infecter","updateInfection","infectionStage","undefined","infectionOptions","stages","length","infectionStage1","pxRatio","retina","pixelRatio","radius","getRadius","pos","getPosition","infectedStage1","infectedStage","query","particles","quadTree","queryCircle","infections","rate","neighbors","p2","destroyed","spawning","infecter2","Math","random","startInfection","updateInfectionStage","infectionStage2","infectedStage2"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Infecter = void 0;\nclass Infecter {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        return this.container.options.infection.enable;\n    }\n    reset() {\n    }\n    interact(p1, delta) {\n        var _a, _b;\n        const infecter1 = p1.infecter;\n        infecter1.updateInfection(delta.value);\n        if (infecter1.infectionStage === undefined) {\n            return;\n        }\n        const container = this.container;\n        const options = container.options;\n        const infectionOptions = options.infection;\n        if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n            return;\n        }\n        const infectionStage1 = infectionOptions.stages[infecter1.infectionStage];\n        const pxRatio = container.retina.pixelRatio;\n        const radius = p1.getRadius() * 2 + infectionStage1.radius * pxRatio;\n        const pos = p1.getPosition();\n        const infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;\n        const query = container.particles.quadTree.queryCircle(pos, radius);\n        const infections = infectionStage1.rate;\n        const neighbors = query.length;\n        for (const p2 of query) {\n            if (p2 === p1 ||\n                p2.destroyed ||\n                p2.spawning ||\n                !(p2.infecter.infectionStage === undefined || p2.infecter.infectionStage !== infecter1.infectionStage)) {\n                continue;\n            }\n            const infecter2 = p2.infecter;\n            if (Math.random() < infections / neighbors) {\n                if (infecter2.infectionStage === undefined) {\n                    infecter2.startInfection(infectedStage1);\n                }\n                else if (infecter2.infectionStage < infecter1.infectionStage) {\n                    infecter2.updateInfectionStage(infectedStage1);\n                }\n                else if (infecter2.infectionStage > infecter1.infectionStage) {\n                    const infectionStage2 = infectionOptions.stages[infecter2.infectionStage];\n                    const infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;\n                    infecter1.updateInfectionStage(infectedStage2);\n                }\n            }\n        }\n    }\n}\nexports.Infecter = Infecter;\n"]},"metadata":{},"sourceType":"script"}