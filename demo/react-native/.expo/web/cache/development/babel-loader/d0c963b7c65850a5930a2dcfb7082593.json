{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Connector = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Modes_1 = require(\"../../Enums/Modes\");\n\nvar Connector = function () {\n  function Connector(container) {\n    _classCallCheck(this, Connector);\n\n    this.container = container;\n  }\n\n  _createClass(Connector, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container;\n      var mouse = container.interactivity.mouse;\n      var events = container.options.interactivity.events;\n\n      if (!(events.onHover.enable && mouse.position)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      return Utils_1.Utils.isInArray(Modes_1.HoverMode.connect, hoverMode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact() {\n      var container = this.container;\n      var options = container.options;\n\n      if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n        var mousePos = container.interactivity.mouse.position;\n\n        if (!mousePos) {\n          return;\n        }\n\n        var distance = Math.abs(container.retina.connectModeRadius);\n        var query = container.particles.quadTree.queryCircle(mousePos, distance);\n        var i = 0;\n\n        for (var _iterator = _createForOfIteratorHelperLoose(query), _step; !(_step = _iterator()).done;) {\n          var p1 = _step.value;\n          var pos1 = p1.getPosition();\n\n          for (var _iterator2 = _createForOfIteratorHelperLoose(query.slice(i + 1)), _step2; !(_step2 = _iterator2()).done;) {\n            var p2 = _step2.value;\n            var pos2 = p2.getPosition();\n            var distMax = Math.abs(container.retina.connectModeDistance);\n            var xDiff = Math.abs(pos1.x - pos2.x);\n            var yDiff = Math.abs(pos1.y - pos2.y);\n\n            if (xDiff < distMax && yDiff < distMax) {\n              container.canvas.drawConnectLine(p1, p2);\n            }\n          }\n\n          ++i;\n        }\n      }\n    }\n  }]);\n\n  return Connector;\n}();\n\nexports.Connector = Connector;","map":{"version":3,"sources":["/Users/matteo/Projects/GitHub Projects/tsparticles/tsparticles-master/demo/react-native/node_modules/react-native-tsparticles/node_modules/tsparticles/dist/Interactions/External/Connector.js"],"names":["Object","defineProperty","exports","value","Connector","Utils_1","require","Modes_1","container","mouse","interactivity","events","options","onHover","enable","position","hoverMode","mode","Utils","isInArray","HoverMode","connect","status","mousePos","distance","Math","abs","retina","connectModeRadius","query","particles","quadTree","queryCircle","i","p1","pos1","getPosition","slice","p2","pos2","distMax","connectModeDistance","xDiff","x","yDiff","y","canvas","drawConnectLine"],"mappings":"AAAA;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,IAAMC,OAAO,GAAGC,OAAO,eAAvB;;AACA,IAAMC,OAAO,GAAGD,OAAO,qBAAvB;;IACMF,S;AACF,qBAAYI,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;;;gCACW;AACR,UAAMA,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMC,KAAK,GAAGD,SAAS,CAACE,aAAV,CAAwBD,KAAtC;AACA,UAAME,MAAM,GAAGH,SAAS,CAACI,OAAV,CAAkBF,aAAlB,CAAgCC,MAA/C;;AACA,UAAI,EAAEA,MAAM,CAACE,OAAP,CAAeC,MAAf,IAAyBL,KAAK,CAACM,QAAjC,CAAJ,EAAgD;AAC5C,eAAO,KAAP;AACH;;AACD,UAAMC,SAAS,GAAGL,MAAM,CAACE,OAAP,CAAeI,IAAjC;AACA,aAAOZ,OAAO,CAACa,KAAR,CAAcC,SAAd,CAAwBZ,OAAO,CAACa,SAAR,CAAkBC,OAA1C,EAAmDL,SAAnD,CAAP;AACH;;;4BACO,CACP;;;+BACU;AACP,UAAMR,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMI,OAAO,GAAGJ,SAAS,CAACI,OAA1B;;AACA,UAAIA,OAAO,CAACF,aAAR,CAAsBC,MAAtB,CAA6BE,OAA7B,CAAqCC,MAArC,IAA+CN,SAAS,CAACE,aAAV,CAAwBY,MAAxB,KAAmC,WAAtF,EAAmG;AAC/F,YAAMC,QAAQ,GAAGf,SAAS,CAACE,aAAV,CAAwBD,KAAxB,CAA8BM,QAA/C;;AACA,YAAI,CAACQ,QAAL,EAAe;AACX;AACH;;AACD,YAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASlB,SAAS,CAACmB,MAAV,CAAiBC,iBAA1B,CAAjB;AACA,YAAMC,KAAK,GAAGrB,SAAS,CAACsB,SAAV,CAAoBC,QAApB,CAA6BC,WAA7B,CAAyCT,QAAzC,EAAmDC,QAAnD,CAAd;AACA,YAAIS,CAAC,GAAG,CAAR;;AACA,6DAAiBJ,KAAjB,wCAAwB;AAAA,cAAbK,EAAa;AACpB,cAAMC,IAAI,GAAGD,EAAE,CAACE,WAAH,EAAb;;AACA,gEAAiBP,KAAK,CAACQ,KAAN,CAAYJ,CAAC,GAAG,CAAhB,CAAjB,2CAAqC;AAAA,gBAA1BK,EAA0B;AACjC,gBAAMC,IAAI,GAAGD,EAAE,CAACF,WAAH,EAAb;AACA,gBAAMI,OAAO,GAAGf,IAAI,CAACC,GAAL,CAASlB,SAAS,CAACmB,MAAV,CAAiBc,mBAA1B,CAAhB;AACA,gBAAMC,KAAK,GAAGjB,IAAI,CAACC,GAAL,CAASS,IAAI,CAACQ,CAAL,GAASJ,IAAI,CAACI,CAAvB,CAAd;AACA,gBAAMC,KAAK,GAAGnB,IAAI,CAACC,GAAL,CAASS,IAAI,CAACU,CAAL,GAASN,IAAI,CAACM,CAAvB,CAAd;;AACA,gBAAIH,KAAK,GAAGF,OAAR,IAAmBI,KAAK,GAAGJ,OAA/B,EAAwC;AACpChC,cAAAA,SAAS,CAACsC,MAAV,CAAiBC,eAAjB,CAAiCb,EAAjC,EAAqCI,EAArC;AACH;AACJ;;AACD,YAAEL,CAAF;AACH;AACJ;AACJ;;;;;;AAEL/B,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Connector = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Modes_1 = require(\"../../Enums/Modes\");\nclass Connector {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        const container = this.container;\n        const mouse = container.interactivity.mouse;\n        const events = container.options.interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        return Utils_1.Utils.isInArray(Modes_1.HoverMode.connect, hoverMode);\n    }\n    reset() {\n    }\n    interact() {\n        const container = this.container;\n        const options = container.options;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius);\n            const query = container.particles.quadTree.queryCircle(mousePos, distance);\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition();\n                    const distMax = Math.abs(container.retina.connectModeDistance);\n                    const xDiff = Math.abs(pos1.x - pos2.x);\n                    const yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        container.canvas.drawConnectLine(p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n}\nexports.Connector = Connector;\n"]},"metadata":{},"sourceType":"script"}